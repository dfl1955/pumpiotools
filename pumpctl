#!/bin/bash 

### BEGIN INIT INFO
#
# Provides: pumpctl
# Required-Start: $remote_fs $network
# Required-Stop:	$remote_fs $network
# Default Start:	2 3 4 5
# Default Stop:		0 1 6
# Short-Description: 	pump control program
# Description:		starts, stops and reports status for nodejs pump
#
### END INIT INFO

PNAME=$(basename $0)

. /lib/lsb/init-functions

USAGE="pumpctl start|restart|stop|status|cleanlogs"

LOGDIR=/var/log/pump
LOGSTEM=pumpdc
TS=$(date +%Y%M%d)
LOGNAME=${LOGSTEM}-$$.clog
FLOGNAME=${LOGDIR}/${LOGNAME}

declare -a pumpinfowords

case $1 in
start) 	log_daemon_msg "${PNAME} starts" pump
	forever start -l ${FLOGNAME} /usr/local/bin/pump && \
		log_end_msg 0
	exit 0
	;;
restart) log_daemon_msg "${PNAME} stopping" pump
	 forever stop /usr/local/bin/pump && \
		log_end_msg 0
	 log_daemon_msg "${PNAME} starts" pump
	 forever start -l ${FLOGNAME} /usr/local/bin/pump && \
		log_end_msg 0
	exit 0
	;;
stop)	log_daemon_msg "${PNAME} stopping" pump
	forever stop  /usr/local/bin/pump && \
		log_end_msg 0
	exit 0
	;;
status)	:
	lines=$(forever list | grep pump | wc -l )
	# this might be cleverer if it caught the outpput from forever list
	case $lines in
	0)	log_daemon_msg ${PNAME} pump is not running
		log_end_msg 0
		exit 1
		;;
	*)	forever list | grep pump
		words=$(forever list | grep pump)
		i=0;for word in $words;do
		#	3=nodejs, 4=pump 5+6=pids 7=log
			pumpinfowords[$i]=$word
			(( i = i + 1 ))
		done
		log_daemon_msg ${pumpinfowords[4]} is up, logfile ${pumpinfowords[7]}
		log_end_msg 0
 		;;
	esac
	exit 0
	;;
help)	echo $USAGE 
	;;
cleanlogs) log_daemon_msg $PNAME cleanlogs
	ls ${LOGDIR}/*.clog >/dev/null 2>&1
	if [ $? -gt 0 ];then
		logs=0
		log_daemon_msg $PNAME $LOGDIR has $logs .clog files
		log_end_msg 0
	else
		logs=$( ls  ${LOGDIR}/*.clog | wc -l )
	fi
	if [ $logs -gt 0 ];then
		rm  ${LOGDIR}/*.clog 
		if [ $? -eq 0 ];then
			log_end_msg 0
		 	exit 0 
		else
			log_end_msg 1
			exit 1
		fi
	fi
	exit 0
	;;
esac

log_end_msg 0
